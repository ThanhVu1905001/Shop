import React, { useState, useEffect } from "react";
import { Form, Input, InputNumber, Button, Table, Spin, message } from "antd";
import ReactSelect from "react-select";
import customerApi from "../../api/customerApi.jsx";
import productApi from "../../api/productApi.jsx";
import orderApi from "../../api/orderApi.jsx";
import AuthApi from "../../api/authApi.jsx";
import ModalAddCustomer from "../customers/ModalAddCustomer.jsx";
import { useNavigate } from "react-router-dom";
import { Row, Col, Empty } from "antd";
import { DeleteOutlined } from "@ant-design/icons";
import PrintComponent from "./PrintComponent.jsx";

const ModalAddOrder = ({ setOrderCreated }) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [customers, setCustomers] = useState([]);
  const [selectedCustomer, setSelectedCustomer] = useState(null);
  const [addModalVisible, setAddModalVisible] = useState(false);
  const [loading, setLoading] = useState(false);
  const [searchProductTerm, setSearchProductTerm] = useState("");
  const [products, setProducts] = useState([]);
  const [orderProducts, setOrderProducts] = useState([]);
  const [customerPayment, setCustomerPayment] = useState(0);
  const [totalPayment, setTotalPayment] = useState(0);
  const [orderNote, setOrderNote] = useState("");
  const [printModalVisible, setPrintModalVisible] = useState(false);
  const [orderId, setOrderId] = useState(null);
  const navigate = useNavigate();

  const handleOrderNoteChange = (e) => {
    setOrderNote(e.target.value);
  };  

  const handleCreateOrder = async () => {
    if (!selectedCustomer) {
      message.warning("Vui l√≤ng ch·ªçn kh√°ch h√†ng tr∆∞·ªõc khi t·∫°o ƒë∆°n h√†ng.");
      return;
    }
    if (orderProducts.length === 0) {
      // N·∫øu danh s√°ch s·∫£n ph·∫©m tr·ªëng, hi·ªÉn th·ªã th√¥ng b√°o v√† ngƒÉn ch·∫∑n ti·∫øp t·ª•c x·ª≠ l√Ω
      message.warning(
        "Danh s√°ch s·∫£n ph·∫©m tr·ªëng. Vui l√≤ng th√™m s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng."
      );
      return;
    }
    if (customerPayment < totalPayment) {
      // N·∫øu ti·ªÅn kh√°ch ƒë∆∞a nh·ªè h∆°n t·ªïng ti·ªÅn thanh to√°n, hi·ªÉn th·ªã th√¥ng b√°o v√† ngƒÉn ch·∫∑n ti·∫øp t·ª•c x·ª≠ l√Ω
      message.warning(
        "Ti·ªÅn kh√°ch ƒë∆∞a kh√¥ng ƒë·ªß ƒë·ªÉ thanh to√°n. Vui l√≤ng ki·ªÉm tra l·∫°i."
      );
      return;
    }
    const userId = AuthApi.getUserId(); // L·∫•y ID c·ªßa ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p t·ª´ AuthApi
    const orderData = {
      customerId: selectedCustomer.id,
      userId: userId,
      totalAmount: totalPayment,
      orderDetails: orderProducts.map((product) => ({
        productId: product.id,
        onHand: product.onHand,
        price: product.price,
      })),
      notes: orderNote,
    };

    try {
      const createdOrder = await orderApi.createOrder(orderData);
      
      // navigate(`/admin/orders/${createdOrder.id}`);
      message.success("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng");
      setPrintModalVisible(true);
      setOrderId(createdOrder.id);
    } catch (error) {
      console.error("C√≥ l·ªói khi t·∫°o ƒë∆°n h√†ng:", error);
      message.error("ƒê√£ x·∫£y ra l·ªói khi t·∫°o ƒë∆°n h√†ng");
      // Th√™m x·ª≠ l√Ω l·ªói n·∫øu c·∫ßn
    }
  };

  const productColumns = [
    {
      title: "·∫¢nh",
      dataIndex: "image",
      flex: 1,
      key: "image",
      render: (image) => (
        <img src={image} alt="Product" style={{ width: 50, height: 50 }} />
      ),
    },
    {
      title: "T√™n s·∫£n ph·∫©m",
      dataIndex: "name",
      key: "name",
      flex: 1,
    },
    {
      title: "M√£ s·∫£n ph·∫©m",
      dataIndex: "code",
      key: "code",
      flex: 1,
    },
    {
      title: "S·ªë l∆∞·ª£ng",
      dataIndex: "onHand",
      flex: 1,
      key: "onHand",
      render: (text, record) => (
    <InputNumber
      min={1}
      value={text}
      onChange={(newOnHand) =>
        handleOnHandChange(record.id, newOnHand)
      }
      onBlur={(e) => {
        const newOnHand = parseInt(e.target.value, 10);
        handleOnHandChange(record.id, newOnHand);
      }}
    />
      ),
      width: 100,
    },
    {
      title: "Th√†nh ti·ªÅn",
      dataIndex: "total",
      key: "total",
      flex: 1,
    },
    {
      title: "X√≥a",
      key: "delete",
      render: (text, record) => (
        <Button type="danger" icon={<DeleteOutlined />} onClick={() => handleDeleteProduct(record.id)} style={{ color: '#ff4d4f' }} />
      ),
      flex: 1,
    },
  ];

  //product

  const handleDeleteProduct = (productId) => {
    setOrderProducts((prevProducts) => {
      return prevProducts.filter((product) => product.id !== productId);
    });
  };
  const addProductToOrder = async (selectedProduct) => {
    const availableQuantity = selectedProduct.onHand;
  
    if (availableQuantity === 0) {
      // Handle case where product is out of stock
      message.warning("S·∫£n ph·∫©m n√†y ƒë√£ h·∫øt h√†ng.");
      return;
    }
  
    const existingProduct = orderProducts.find(
      (orderProduct) => orderProduct.id === selectedProduct.id
    );
  
    if (existingProduct) {
      const newQuantity = existingProduct.onHand + 1;
  
      if (newQuantity > availableQuantity) {
        // Handle case where requested quantity exceeds available quantity
        message.warning(
          `S·ªë l∆∞·ª£ng y√™u c·∫ßu v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng hi·ªán c√≥ (${availableQuantity}). Vui l√≤ng nh·∫≠p l·∫°i.`
        );
        return;
      }
  
      setOrderProducts((prevProducts) =>
        prevProducts.map((product) =>
          product.id === selectedProduct.id
            ? {
                ...product,
                onHand: newQuantity,
                total: newQuantity * product.price,
              }
            : product
        )
      );
    } else {
      if (selectedProduct.onHand === 0) {
        // Handle case where product is out of stock
        message.warning("S·∫£n ph·∫©m n√†y ƒë√£ h·∫øt h√†ng.");
        return;
      }
  
      if (selectedProduct.onHand < 1) {
        // Handle case where requested quantity is less than 1
        message.warning("S·ªë l∆∞·ª£ng y√™u c·∫ßu ph·∫£i l·ªõn h∆°n 0. Vui l√≤ng nh·∫≠p l·∫°i.");
        return;
      }
  
      setOrderProducts((prevProducts) => [
        ...prevProducts,
        {
          ...selectedProduct,
          onHand: 1,
          total: selectedProduct.price,
        },
      ]);
    }
  };
  
  // X·ª≠ l√Ω ch·ªçn s·∫£n ph·∫©m t·ª´ danh s√°ch
  const handleProductSelect = (selectedOption) => {
    const selectedProduct = products.find(
      (product) => product.id === selectedOption.value
    );
    if (selectedProduct) {
      addProductToOrder(selectedProduct);
    }
  };

  const getProductById = async (productId) => {
    try {
      const response = await productApi.getById(productId);
      return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu chi ti·∫øt s·∫£n ph·∫©m
    } catch (error) {
      console.error("Failed to fetch product details:", error);
      return null;
    }
  };

  // X·ª≠ l√Ω thay ƒë·ªïi s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong ƒë∆°n h√†ng
  const handleOnHandChange = async (productId, newOnHand) => {
    const productDetails = await getProductById(productId);
  
    if (!Number.isInteger(newOnHand) || newOnHand < 1) {
      // Handle case where entered quantity is not a positive integer
      message.warning("S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng. Vui l√≤ng nh·∫≠p l·∫°i.");
      return;
    }
  
    if (productDetails && newOnHand <= productDetails.onHand) {
      setOrderProducts((prevProducts) =>
        prevProducts.map((product) =>
          product.id === productId
            ? {
                ...product,
                onHand: newOnHand,
                total: newOnHand * product.price,
              }
            : product
        )
      );
    } else {
      message.warning(
        `S·ªë l∆∞·ª£ng m·∫∑t h√†ng n√†y hi·ªán c√≥ l√† ${productDetails.onHand}. Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng ph√π h·ª£p.`
      );
    }
  };
  

  // X·ª≠ l√Ω logic t√≠nh t·ªïng s·ªë ti·ªÅn c·ªßa ƒë∆°n h√†ng
  useEffect(() => {
    const total = orderProducts.reduce(
      (sum, product) => sum + product.total,
      0
    );
    setTotalPayment(total);
  }, [orderProducts]);

  useEffect(() => {
    const fetchProducts = async () => {
      setLoading(true);
      try {
        const response = await productApi.getProducts(
          searchTerm || "",
          1,
          10
        );
        setProducts(response.data.content);
      } catch (error) {
        console.error("Failed to fetch product list:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, [searchProductTerm]);

  const productOptions = products?.map((product) => ({
    value: product.id,
    label: (
      <div className="custom-select-option" style={{display: 'flex' ,justifyContent: "space-between", width: "100%"}}>
        <span className="product-name" style={{flex: '1'}}>{product.name}</span>
        <span className="quantity" style={{flexShrink: '0'}}>(S·ªë l∆∞·ª£ng: {product.onHand})</span>
      </div>
    ),
  }));
  

  //customer
  useEffect(() => {
    const fetchCustomers = async () => {
      setLoading(true);
      try {
        const response = await customerApi.getCustomers(
          searchTerm || "",
          1,
          10
        );
        setCustomers(response.data.content);
      } catch (error) {
        console.error("Failed to fetch customer list:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchCustomers();
  }, [searchTerm]);

  const cusOptions = [
    { value: "add", label: "üåü Th√™m m·ªõi kh√°ch h√†ng" }, // Added a star emoji before the label
    ...customers.map((customer) => ({
      value: customer.id,
      label: customer.name,
    })),
  ];
  
  const customStyles = {
    option: (provided, state) => ({
      ...provided,
      backgroundColor: state.label.startsWith("üåü") ? '#007bff' : 'white', 
      color: state.label.startsWith("üåü") ? 'white' : 'black', 
      cursor: 'pointer',
    }),
    singleValue: (provided, state) => ({
      ...provided,
      color: state.isSelected ? 'white' : 'black', 
    }),
  };

  const customerCardStyles = {
    display: "flex",
    flexDirection: "column",
    border: "1px solid #ccc",
    padding: "10px",
    margin: "10px",
    maxWidh: "100%",
    borderRadius: "5px",
    boxShadow: "0 0 8px rgba(0,0,0,0.1)",
    backgroundColor: "#fff",

  };

  const customerInfoStyles = {
    marginBottom: "10px",
  };

  const fetchData = async (keyWord, page, pageSize) => {
    setLoading(true);
    try {
      const response = await customerApi.getCustomers(keyWord, page, pageSize);
      setCustomers(response.data.content);
      setTotalItems(response.data.totalElements);
    } catch (error) {
      console.error("Error fetching data:", error);
      message.error("Failed to fetch customers");
    } finally {
      setLoading(false);
    }
  };
  const renderCustomerCard = () => {
    return (
      <div style={customerCardStyles}>
        <div style={customerInfoStyles}>
          <h3>{selectedCustomer.name}</h3>
          <p>Code: {selectedCustomer.code}</p>
          <p>Phone Number: {selectedCustomer.phone}</p>
          <p>Address: {selectedCustomer.address}</p>
          {/* Th√™m c√°c th√¥ng tin kh√°c c·ªßa kh√°ch h√†ng */}
        </div>
        <Button onClick={() => setSelectedCustomer(null)} style={{backgroundColor: 'white', color: '#ff7f7f', borderColor: '#ff7f7f'}}>X√≥a</Button>
      </div>
    );
  };

  return (
    <Row gutter={[16, 16]}>
      <Col xs={24} sm={24} md={15}>
        <label style={{ marginTop: "20px" }}>Danh s√°ch s·∫£n ph·∫©m</label>
        <ReactSelect
          options={productOptions}
          isSearchable
          placeholder="Ch·ªçn s·∫£n ph·∫©m"
          onInputChange={setSearchProductTerm}
          onChange={handleProductSelect}
          menuPortalTarget={document.body}
          menuPlacement="bottom"
          maxMenuHeight={250}
          styles={{
            menuPortal: (base) => ({
              ...base,
              zIndex: 9999,
            }),
          }}
        />

        <Table
          dataSource={orderProducts}
          columns={productColumns}
          rowKey="id"
          pagination={false}
          style={{ marginTop: "20px" }}
          locale={{
            emptyText: (
              <Empty
                image={Empty.PRESENTED_IMAGE_SIMPLE}
                description="Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c ch·ªçn"
              />
            ),
          }}
        />

        {addModalVisible && (
          <>
            <ModalAddCustomer
              visible={addModalVisible}
              setVisible={setAddModalVisible}
              fetchData={fetchData}
            />
          </>
        )}
      </Col>
      <Col xs={24} sm={24} md={9}>
        <label style={{ marginTop: "20px" }}>Ch·ªçn kh√°ch h√†ng</label>
        <ReactSelect
          options={cusOptions}
          isSearchable
          placeholder="Ch·ªçn kh√°ch h√†ng"
          onInputChange={setSearchTerm}
          onChange={(selectedOption) => {
            if (selectedOption.value === "add") {
              setAddModalVisible(true);
            } else {
              setSelectedCustomer(
                customers.find(
                  (customer) => customer.id === selectedOption.value
                )
              );
            }
          }}
          menuPortalTarget={document.body}
          menuPlacement="bottom"
          maxMenuHeight={200}
          styles={{
            menuPortal: (base) => ({
              ...base,
              zIndex: 9999,
            }),
            ...customStyles,
          }}
        />

        {loading && <Spin />}

        {selectedCustomer && (
          <div style={{ marginTop: "20px" }}>{renderCustomerCard()}</div>
        )}

        <div style={{ marginTop: "20px" }}>
          <label style={{ marginTop: "20px" }}>Ghi ch√∫ ƒë∆°n h√†ng</label>
          <Form.Item>
            <Input.TextArea
              value={orderNote}
              onChange={handleOrderNoteChange}
              placeholder="Nh·∫≠p ghi ch√∫ cho ƒë∆°n h√†ng"
              style={{ boxShadow: "0 0 8px rgba(0,0,0,0.1)", display: "block", width: "100%",marginTop: "8px" }}
            />
          </Form.Item>
        </div>


        <div
          style={{
            marginTop: "20px",
            border: "1px solid #ccc",
            padding: "10px",
            backgroundColor: "#fff",
            boxShadow: "0 0 8px rgba(0,0,0,0.1)",
          }}
        >
          <h2>H√≥a ƒë∆°n</h2>
          <Form>
            {/* Other form fields... */}
            <Form.Item label="T·ªïng ti·ªÅn thanh to√°n">
              <Input
                disabled
                value={totalPayment}
                style={{
                  border: "none",
                  boxShadow: "none",
                  color: "#000",
                  background: "inherit",
                  textAlign: "right",
                  borderBottom: "1px solid #ccc",
                }}
              />
            </Form.Item>
            <Form.Item label="Ti·ªÅn kh√°ch ph·∫£i tr·∫£">
              <Input
                disabled
                value={totalPayment}
                style={{
                  border: "none",
                  boxShadow: "none",
                  color: "#000",
                  background: "inherit",
                  textAlign: "right",
                  borderBottom: "1px solid #ccc",
                }}
              />
            </Form.Item>
            <Form.Item label="Ti·ªÅn kh√°ch ƒë∆∞a">
              <Input
                value={customerPayment === 0 ? "" : customerPayment}
                onChange={(e) => {
                  const value = e.target.value;
                  setCustomerPayment(value);
                }}
                style={{
                  border: "none",
                  boxShadow: "none",
                  color: "inherit",
                  backgroundColor: "inherit",
                  borderBottom: "1px solid #ccc",
                  textAlign: "right",
                }}
                placeholder="Xin nh·∫≠p"
              />
            </Form.Item>
            <Form.Item label="Ti·ªÅn th·ª´a tr·∫£ kh√°ch">
              <Input
                disabled
                value={customerPayment - totalPayment}
                style={{
                  border: "none",
                  boxShadow: "none",
                  color: "#000",
                  background: "inherit",
                  textAlign: "right",
                  borderBottom: "1px solid #ccc",
                }}
              />
            </Form.Item>
            <div style={{ display: "flex", justifyContent: "center" }}>
              <Button type="primary" onClick={handleCreateOrder}>
                T·∫°o ƒë∆°n h√†ng
              </Button>
            </div>
          </Form>
        </div>
      </Col>
      <PrintComponent
        visible={printModalVisible}
        onCancel={() => setPrintModalVisible(false)}
        orderId={orderId}
        orderDetails={{
          customer: selectedCustomer,
          orderProducts,
          totalPayment,
          customerPayment,
          orderNote,
        }}
      />
    </Row>
  );
};

export default ModalAddOrder;
